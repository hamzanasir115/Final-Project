//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Grade_Uploading_and_Viewing_Criteria.localhost {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IService1", Namespace="http://tempuri.org/")]
    public partial class Service1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback IsAlreadyExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterStdOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterTeacherOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsLoginTeacherOperationCompleted;
        
        private System.Threading.SendOrPostCallback TeacherLogoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback isValidUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataUsingDataContractOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsTeacherAlreadyExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidResetOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback resetPassOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPasswordTeacherOperationCompleted;
        
        private System.Threading.SendOrPostCallback resetPassTeacherOperationCompleted;
        
        private System.Threading.SendOrPostCallback isValidSubjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSubjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsSubjectAlreadyExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback isTeacherSubAlreadyExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTeacherRegisteredSubjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback showSubjectsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TeacherShowSubjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback isValidTeacherOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service1() {
            this.Url = global::Grade_Uploading_and_Viewing_Criteria.Properties.Settings.Default.Grade_Uploading_and_Viewing_Criteria_localhost_Service1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event IsAlreadyExistCompletedEventHandler IsAlreadyExistCompleted;
        
        /// <remarks/>
        public event GetDataCompletedEventHandler GetDataCompleted;
        
        /// <remarks/>
        public event RegisterStdCompletedEventHandler RegisterStdCompleted;
        
        /// <remarks/>
        public event RegisterTeacherCompletedEventHandler RegisterTeacherCompleted;
        
        /// <remarks/>
        public event IsLoginTeacherCompletedEventHandler IsLoginTeacherCompleted;
        
        /// <remarks/>
        public event TeacherLogoutCompletedEventHandler TeacherLogoutCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event isValidUserCompletedEventHandler isValidUserCompleted;
        
        /// <remarks/>
        public event GetDataUsingDataContractCompletedEventHandler GetDataUsingDataContractCompleted;
        
        /// <remarks/>
        public event IsTeacherAlreadyExistsCompletedEventHandler IsTeacherAlreadyExistsCompleted;
        
        /// <remarks/>
        public event ValidResetCompletedEventHandler ValidResetCompleted;
        
        /// <remarks/>
        public event SetPasswordCompletedEventHandler SetPasswordCompleted;
        
        /// <remarks/>
        public event DeleteRecordCompletedEventHandler DeleteRecordCompleted;
        
        /// <remarks/>
        public event resetPassCompletedEventHandler resetPassCompleted;
        
        /// <remarks/>
        public event SetPasswordTeacherCompletedEventHandler SetPasswordTeacherCompleted;
        
        /// <remarks/>
        public event resetPassTeacherCompletedEventHandler resetPassTeacherCompleted;
        
        /// <remarks/>
        public event isValidSubjectCompletedEventHandler isValidSubjectCompleted;
        
        /// <remarks/>
        public event AddSubjectCompletedEventHandler AddSubjectCompleted;
        
        /// <remarks/>
        public event IsSubjectAlreadyExistCompletedEventHandler IsSubjectAlreadyExistCompleted;
        
        /// <remarks/>
        public event isTeacherSubAlreadyExistCompletedEventHandler isTeacherSubAlreadyExistCompleted;
        
        /// <remarks/>
        public event AddTeacherRegisteredSubjectCompletedEventHandler AddTeacherRegisteredSubjectCompleted;
        
        /// <remarks/>
        public event showSubjectsCompletedEventHandler showSubjectsCompleted;
        
        /// <remarks/>
        public event TeacherShowSubjectCompletedEventHandler TeacherShowSubjectCompleted;
        
        /// <remarks/>
        public event isValidTeacherCompletedEventHandler isValidTeacherCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/IsAlreadyExist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IsAlreadyExist([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pass, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ques, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string answer, out bool IsAlreadyExistResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool IsAlreadyExistResultSpecified) {
            object[] results = this.Invoke("IsAlreadyExist", new object[] {
                        username,
                        pass,
                        ques,
                        answer});
            IsAlreadyExistResult = ((bool)(results[0]));
            IsAlreadyExistResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void IsAlreadyExistAsync(string username, string pass, string ques, string answer) {
            this.IsAlreadyExistAsync(username, pass, ques, answer, null);
        }
        
        /// <remarks/>
        public void IsAlreadyExistAsync(string username, string pass, string ques, string answer, object userState) {
            if ((this.IsAlreadyExistOperationCompleted == null)) {
                this.IsAlreadyExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAlreadyExistOperationCompleted);
            }
            this.InvokeAsync("IsAlreadyExist", new object[] {
                        username,
                        pass,
                        ques,
                        answer}, this.IsAlreadyExistOperationCompleted, userState);
        }
        
        private void OnIsAlreadyExistOperationCompleted(object arg) {
            if ((this.IsAlreadyExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAlreadyExistCompleted(this, new IsAlreadyExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/GetData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetData(int value, [System.Xml.Serialization.XmlIgnoreAttribute()] bool valueSpecified) {
            object[] results = this.Invoke("GetData", new object[] {
                        value,
                        valueSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataAsync(int value, bool valueSpecified) {
            this.GetDataAsync(value, valueSpecified, null);
        }
        
        /// <remarks/>
        public void GetDataAsync(int value, bool valueSpecified, object userState) {
            if ((this.GetDataOperationCompleted == null)) {
                this.GetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataOperationCompleted);
            }
            this.InvokeAsync("GetData", new object[] {
                        value,
                        valueSpecified}, this.GetDataOperationCompleted, userState);
        }
        
        private void OnGetDataOperationCompleted(object arg) {
            if ((this.GetDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/RegisterStd", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RegisterStd([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ques, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string answer) {
            this.Invoke("RegisterStd", new object[] {
                        username,
                        password,
                        ques,
                        answer});
        }
        
        /// <remarks/>
        public void RegisterStdAsync(string username, string password, string ques, string answer) {
            this.RegisterStdAsync(username, password, ques, answer, null);
        }
        
        /// <remarks/>
        public void RegisterStdAsync(string username, string password, string ques, string answer, object userState) {
            if ((this.RegisterStdOperationCompleted == null)) {
                this.RegisterStdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterStdOperationCompleted);
            }
            this.InvokeAsync("RegisterStd", new object[] {
                        username,
                        password,
                        ques,
                        answer}, this.RegisterStdOperationCompleted, userState);
        }
        
        private void OnRegisterStdOperationCompleted(object arg) {
            if ((this.RegisterStdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterStdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/RegisterTeacher", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RegisterTeacher([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string secretcode) {
            this.Invoke("RegisterTeacher", new object[] {
                        username,
                        password,
                        secretcode});
        }
        
        /// <remarks/>
        public void RegisterTeacherAsync(string username, string password, string secretcode) {
            this.RegisterTeacherAsync(username, password, secretcode, null);
        }
        
        /// <remarks/>
        public void RegisterTeacherAsync(string username, string password, string secretcode, object userState) {
            if ((this.RegisterTeacherOperationCompleted == null)) {
                this.RegisterTeacherOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterTeacherOperationCompleted);
            }
            this.InvokeAsync("RegisterTeacher", new object[] {
                        username,
                        password,
                        secretcode}, this.RegisterTeacherOperationCompleted, userState);
        }
        
        private void OnRegisterTeacherOperationCompleted(object arg) {
            if ((this.RegisterTeacherCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterTeacherCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/IsLoginTeacher", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IsLoginTeacher([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, out bool IsLoginTeacherResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool IsLoginTeacherResultSpecified) {
            object[] results = this.Invoke("IsLoginTeacher", new object[] {
                        username,
                        password});
            IsLoginTeacherResult = ((bool)(results[0]));
            IsLoginTeacherResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void IsLoginTeacherAsync(string username, string password) {
            this.IsLoginTeacherAsync(username, password, null);
        }
        
        /// <remarks/>
        public void IsLoginTeacherAsync(string username, string password, object userState) {
            if ((this.IsLoginTeacherOperationCompleted == null)) {
                this.IsLoginTeacherOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsLoginTeacherOperationCompleted);
            }
            this.InvokeAsync("IsLoginTeacher", new object[] {
                        username,
                        password}, this.IsLoginTeacherOperationCompleted, userState);
        }
        
        private void OnIsLoginTeacherOperationCompleted(object arg) {
            if ((this.IsLoginTeacherCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsLoginTeacherCompleted(this, new IsLoginTeacherCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/TeacherLogout", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TeacherLogout(out bool TeacherLogoutResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool TeacherLogoutResultSpecified) {
            object[] results = this.Invoke("TeacherLogout", new object[0]);
            TeacherLogoutResult = ((bool)(results[0]));
            TeacherLogoutResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void TeacherLogoutAsync() {
            this.TeacherLogoutAsync(null);
        }
        
        /// <remarks/>
        public void TeacherLogoutAsync(object userState) {
            if ((this.TeacherLogoutOperationCompleted == null)) {
                this.TeacherLogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTeacherLogoutOperationCompleted);
            }
            this.InvokeAsync("TeacherLogout", new object[0], this.TeacherLogoutOperationCompleted, userState);
        }
        
        private void OnTeacherLogoutOperationCompleted(object arg) {
            if ((this.TeacherLogoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TeacherLogoutCompleted(this, new TeacherLogoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/Login", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Login([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pass, out bool LoginResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool LoginResultSpecified) {
            object[] results = this.Invoke("Login", new object[] {
                        username,
                        pass});
            LoginResult = ((bool)(results[0]));
            LoginResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void LoginAsync(string username, string pass) {
            this.LoginAsync(username, pass, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string username, string pass, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        username,
                        pass}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/isValidUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void isValidUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, out bool isValidUserResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool isValidUserResultSpecified) {
            object[] results = this.Invoke("isValidUser", new object[] {
                        userName,
                        password});
            isValidUserResult = ((bool)(results[0]));
            isValidUserResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void isValidUserAsync(string userName, string password) {
            this.isValidUserAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void isValidUserAsync(string userName, string password, object userState) {
            if ((this.isValidUserOperationCompleted == null)) {
                this.isValidUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisValidUserOperationCompleted);
            }
            this.InvokeAsync("isValidUser", new object[] {
                        userName,
                        password}, this.isValidUserOperationCompleted, userState);
        }
        
        private void OnisValidUserOperationCompleted(object arg) {
            if ((this.isValidUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isValidUserCompleted(this, new isValidUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/GetDataUsingDataContract", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public CompositeType GetDataUsingDataContract([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CompositeType composite) {
            object[] results = this.Invoke("GetDataUsingDataContract", new object[] {
                        composite});
            return ((CompositeType)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataUsingDataContractAsync(CompositeType composite) {
            this.GetDataUsingDataContractAsync(composite, null);
        }
        
        /// <remarks/>
        public void GetDataUsingDataContractAsync(CompositeType composite, object userState) {
            if ((this.GetDataUsingDataContractOperationCompleted == null)) {
                this.GetDataUsingDataContractOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataUsingDataContractOperationCompleted);
            }
            this.InvokeAsync("GetDataUsingDataContract", new object[] {
                        composite}, this.GetDataUsingDataContractOperationCompleted, userState);
        }
        
        private void OnGetDataUsingDataContractOperationCompleted(object arg) {
            if ((this.GetDataUsingDataContractCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataUsingDataContractCompleted(this, new GetDataUsingDataContractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/IsTeacherAlreadyExists", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IsTeacherAlreadyExists([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, out bool IsTeacherAlreadyExistsResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool IsTeacherAlreadyExistsResultSpecified) {
            object[] results = this.Invoke("IsTeacherAlreadyExists", new object[] {
                        username,
                        password});
            IsTeacherAlreadyExistsResult = ((bool)(results[0]));
            IsTeacherAlreadyExistsResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void IsTeacherAlreadyExistsAsync(string username, string password) {
            this.IsTeacherAlreadyExistsAsync(username, password, null);
        }
        
        /// <remarks/>
        public void IsTeacherAlreadyExistsAsync(string username, string password, object userState) {
            if ((this.IsTeacherAlreadyExistsOperationCompleted == null)) {
                this.IsTeacherAlreadyExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsTeacherAlreadyExistsOperationCompleted);
            }
            this.InvokeAsync("IsTeacherAlreadyExists", new object[] {
                        username,
                        password}, this.IsTeacherAlreadyExistsOperationCompleted, userState);
        }
        
        private void OnIsTeacherAlreadyExistsOperationCompleted(object arg) {
            if ((this.IsTeacherAlreadyExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsTeacherAlreadyExistsCompleted(this, new IsTeacherAlreadyExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/ValidReset", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ValidReset([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ques, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string answer, out bool ValidResetResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool ValidResetResultSpecified) {
            object[] results = this.Invoke("ValidReset", new object[] {
                        username,
                        ques,
                        answer});
            ValidResetResult = ((bool)(results[0]));
            ValidResetResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void ValidResetAsync(string username, string ques, string answer) {
            this.ValidResetAsync(username, ques, answer, null);
        }
        
        /// <remarks/>
        public void ValidResetAsync(string username, string ques, string answer, object userState) {
            if ((this.ValidResetOperationCompleted == null)) {
                this.ValidResetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidResetOperationCompleted);
            }
            this.InvokeAsync("ValidReset", new object[] {
                        username,
                        ques,
                        answer}, this.ValidResetOperationCompleted, userState);
        }
        
        private void OnValidResetOperationCompleted(object arg) {
            if ((this.ValidResetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidResetCompleted(this, new ValidResetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/SetPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetPassword([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ques, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ans, out bool SetPasswordResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SetPasswordResultSpecified) {
            object[] results = this.Invoke("SetPassword", new object[] {
                        username,
                        ques,
                        ans});
            SetPasswordResult = ((bool)(results[0]));
            SetPasswordResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SetPasswordAsync(string username, string ques, string ans) {
            this.SetPasswordAsync(username, ques, ans, null);
        }
        
        /// <remarks/>
        public void SetPasswordAsync(string username, string ques, string ans, object userState) {
            if ((this.SetPasswordOperationCompleted == null)) {
                this.SetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPasswordOperationCompleted);
            }
            this.InvokeAsync("SetPassword", new object[] {
                        username,
                        ques,
                        ans}, this.SetPasswordOperationCompleted, userState);
        }
        
        private void OnSetPasswordOperationCompleted(object arg) {
            if ((this.SetPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPasswordCompleted(this, new SetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/DeleteRecord", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteRecord([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string secretquestion, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string answer) {
            this.Invoke("DeleteRecord", new object[] {
                        username,
                        secretquestion,
                        answer});
        }
        
        /// <remarks/>
        public void DeleteRecordAsync(string username, string secretquestion, string answer) {
            this.DeleteRecordAsync(username, secretquestion, answer, null);
        }
        
        /// <remarks/>
        public void DeleteRecordAsync(string username, string secretquestion, string answer, object userState) {
            if ((this.DeleteRecordOperationCompleted == null)) {
                this.DeleteRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteRecordOperationCompleted);
            }
            this.InvokeAsync("DeleteRecord", new object[] {
                        username,
                        secretquestion,
                        answer}, this.DeleteRecordOperationCompleted, userState);
        }
        
        private void OnDeleteRecordOperationCompleted(object arg) {
            if ((this.DeleteRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/resetPass", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void resetPass([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pass) {
            this.Invoke("resetPass", new object[] {
                        username,
                        pass});
        }
        
        /// <remarks/>
        public void resetPassAsync(string username, string pass) {
            this.resetPassAsync(username, pass, null);
        }
        
        /// <remarks/>
        public void resetPassAsync(string username, string pass, object userState) {
            if ((this.resetPassOperationCompleted == null)) {
                this.resetPassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnresetPassOperationCompleted);
            }
            this.InvokeAsync("resetPass", new object[] {
                        username,
                        pass}, this.resetPassOperationCompleted, userState);
        }
        
        private void OnresetPassOperationCompleted(object arg) {
            if ((this.resetPassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.resetPassCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/SetPasswordTeacher", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetPasswordTeacher([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string code, out bool SetPasswordTeacherResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool SetPasswordTeacherResultSpecified) {
            object[] results = this.Invoke("SetPasswordTeacher", new object[] {
                        username,
                        code});
            SetPasswordTeacherResult = ((bool)(results[0]));
            SetPasswordTeacherResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void SetPasswordTeacherAsync(string username, string code) {
            this.SetPasswordTeacherAsync(username, code, null);
        }
        
        /// <remarks/>
        public void SetPasswordTeacherAsync(string username, string code, object userState) {
            if ((this.SetPasswordTeacherOperationCompleted == null)) {
                this.SetPasswordTeacherOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPasswordTeacherOperationCompleted);
            }
            this.InvokeAsync("SetPasswordTeacher", new object[] {
                        username,
                        code}, this.SetPasswordTeacherOperationCompleted, userState);
        }
        
        private void OnSetPasswordTeacherOperationCompleted(object arg) {
            if ((this.SetPasswordTeacherCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPasswordTeacherCompleted(this, new SetPasswordTeacherCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/resetPassTeacher", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void resetPassTeacher([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pass) {
            this.Invoke("resetPassTeacher", new object[] {
                        username,
                        pass});
        }
        
        /// <remarks/>
        public void resetPassTeacherAsync(string username, string pass) {
            this.resetPassTeacherAsync(username, pass, null);
        }
        
        /// <remarks/>
        public void resetPassTeacherAsync(string username, string pass, object userState) {
            if ((this.resetPassTeacherOperationCompleted == null)) {
                this.resetPassTeacherOperationCompleted = new System.Threading.SendOrPostCallback(this.OnresetPassTeacherOperationCompleted);
            }
            this.InvokeAsync("resetPassTeacher", new object[] {
                        username,
                        pass}, this.resetPassTeacherOperationCompleted, userState);
        }
        
        private void OnresetPassTeacherOperationCompleted(object arg) {
            if ((this.resetPassTeacherCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.resetPassTeacherCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/isValidSubject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void isValidSubject([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string subjectName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string subjectCode, out bool isValidSubjectResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool isValidSubjectResultSpecified) {
            object[] results = this.Invoke("isValidSubject", new object[] {
                        subjectName,
                        subjectCode});
            isValidSubjectResult = ((bool)(results[0]));
            isValidSubjectResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void isValidSubjectAsync(string subjectName, string subjectCode) {
            this.isValidSubjectAsync(subjectName, subjectCode, null);
        }
        
        /// <remarks/>
        public void isValidSubjectAsync(string subjectName, string subjectCode, object userState) {
            if ((this.isValidSubjectOperationCompleted == null)) {
                this.isValidSubjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisValidSubjectOperationCompleted);
            }
            this.InvokeAsync("isValidSubject", new object[] {
                        subjectName,
                        subjectCode}, this.isValidSubjectOperationCompleted, userState);
        }
        
        private void OnisValidSubjectOperationCompleted(object arg) {
            if ((this.isValidSubjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isValidSubjectCompleted(this, new isValidSubjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/AddSubject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddSubject([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string subjectname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string subjectcode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string creditHour) {
            this.Invoke("AddSubject", new object[] {
                        username,
                        subjectname,
                        subjectcode,
                        creditHour});
        }
        
        /// <remarks/>
        public void AddSubjectAsync(string username, string subjectname, string subjectcode, string creditHour) {
            this.AddSubjectAsync(username, subjectname, subjectcode, creditHour, null);
        }
        
        /// <remarks/>
        public void AddSubjectAsync(string username, string subjectname, string subjectcode, string creditHour, object userState) {
            if ((this.AddSubjectOperationCompleted == null)) {
                this.AddSubjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubjectOperationCompleted);
            }
            this.InvokeAsync("AddSubject", new object[] {
                        username,
                        subjectname,
                        subjectcode,
                        creditHour}, this.AddSubjectOperationCompleted, userState);
        }
        
        private void OnAddSubjectOperationCompleted(object arg) {
            if ((this.AddSubjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/IsSubjectAlreadyExist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IsSubjectAlreadyExist([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string subjectname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string subjectcode, out bool IsSubjectAlreadyExistResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool IsSubjectAlreadyExistResultSpecified) {
            object[] results = this.Invoke("IsSubjectAlreadyExist", new object[] {
                        username,
                        subjectname,
                        subjectcode});
            IsSubjectAlreadyExistResult = ((bool)(results[0]));
            IsSubjectAlreadyExistResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void IsSubjectAlreadyExistAsync(string username, string subjectname, string subjectcode) {
            this.IsSubjectAlreadyExistAsync(username, subjectname, subjectcode, null);
        }
        
        /// <remarks/>
        public void IsSubjectAlreadyExistAsync(string username, string subjectname, string subjectcode, object userState) {
            if ((this.IsSubjectAlreadyExistOperationCompleted == null)) {
                this.IsSubjectAlreadyExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsSubjectAlreadyExistOperationCompleted);
            }
            this.InvokeAsync("IsSubjectAlreadyExist", new object[] {
                        username,
                        subjectname,
                        subjectcode}, this.IsSubjectAlreadyExistOperationCompleted, userState);
        }
        
        private void OnIsSubjectAlreadyExistOperationCompleted(object arg) {
            if ((this.IsSubjectAlreadyExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsSubjectAlreadyExistCompleted(this, new IsSubjectAlreadyExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/isTeacherSubAlreadyExist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void isTeacherSubAlreadyExist([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string subjectname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string subjectcode, out bool isTeacherSubAlreadyExistResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool isTeacherSubAlreadyExistResultSpecified) {
            object[] results = this.Invoke("isTeacherSubAlreadyExist", new object[] {
                        username,
                        subjectname,
                        subjectcode});
            isTeacherSubAlreadyExistResult = ((bool)(results[0]));
            isTeacherSubAlreadyExistResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void isTeacherSubAlreadyExistAsync(string username, string subjectname, string subjectcode) {
            this.isTeacherSubAlreadyExistAsync(username, subjectname, subjectcode, null);
        }
        
        /// <remarks/>
        public void isTeacherSubAlreadyExistAsync(string username, string subjectname, string subjectcode, object userState) {
            if ((this.isTeacherSubAlreadyExistOperationCompleted == null)) {
                this.isTeacherSubAlreadyExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisTeacherSubAlreadyExistOperationCompleted);
            }
            this.InvokeAsync("isTeacherSubAlreadyExist", new object[] {
                        username,
                        subjectname,
                        subjectcode}, this.isTeacherSubAlreadyExistOperationCompleted, userState);
        }
        
        private void OnisTeacherSubAlreadyExistOperationCompleted(object arg) {
            if ((this.isTeacherSubAlreadyExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isTeacherSubAlreadyExistCompleted(this, new isTeacherSubAlreadyExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/AddTeacherRegisteredSubject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddTeacherRegisteredSubject([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SubjectName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SubjectCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string CreditHour) {
            this.Invoke("AddTeacherRegisteredSubject", new object[] {
                        username,
                        SubjectName,
                        SubjectCode,
                        CreditHour});
        }
        
        /// <remarks/>
        public void AddTeacherRegisteredSubjectAsync(string username, string SubjectName, string SubjectCode, string CreditHour) {
            this.AddTeacherRegisteredSubjectAsync(username, SubjectName, SubjectCode, CreditHour, null);
        }
        
        /// <remarks/>
        public void AddTeacherRegisteredSubjectAsync(string username, string SubjectName, string SubjectCode, string CreditHour, object userState) {
            if ((this.AddTeacherRegisteredSubjectOperationCompleted == null)) {
                this.AddTeacherRegisteredSubjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTeacherRegisteredSubjectOperationCompleted);
            }
            this.InvokeAsync("AddTeacherRegisteredSubject", new object[] {
                        username,
                        SubjectName,
                        SubjectCode,
                        CreditHour}, this.AddTeacherRegisteredSubjectOperationCompleted, userState);
        }
        
        private void OnAddTeacherRegisteredSubjectOperationCompleted(object arg) {
            if ((this.AddTeacherRegisteredSubjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTeacherRegisteredSubjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/showSubjects", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/Grade_Uploading_and_viewing_Criteria")]
        public SUBJECT[] showSubjects([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username) {
            object[] results = this.Invoke("showSubjects", new object[] {
                        username});
            return ((SUBJECT[])(results[0]));
        }
        
        /// <remarks/>
        public void showSubjectsAsync(string username) {
            this.showSubjectsAsync(username, null);
        }
        
        /// <remarks/>
        public void showSubjectsAsync(string username, object userState) {
            if ((this.showSubjectsOperationCompleted == null)) {
                this.showSubjectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnshowSubjectsOperationCompleted);
            }
            this.InvokeAsync("showSubjects", new object[] {
                        username}, this.showSubjectsOperationCompleted, userState);
        }
        
        private void OnshowSubjectsOperationCompleted(object arg) {
            if ((this.showSubjectsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.showSubjectsCompleted(this, new showSubjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/TeacherShowSubject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/Grade_Uploading_and_viewing_Criteria")]
        public SUBJECT[] TeacherShowSubject([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username) {
            object[] results = this.Invoke("TeacherShowSubject", new object[] {
                        username});
            return ((SUBJECT[])(results[0]));
        }
        
        /// <remarks/>
        public void TeacherShowSubjectAsync(string username) {
            this.TeacherShowSubjectAsync(username, null);
        }
        
        /// <remarks/>
        public void TeacherShowSubjectAsync(string username, object userState) {
            if ((this.TeacherShowSubjectOperationCompleted == null)) {
                this.TeacherShowSubjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTeacherShowSubjectOperationCompleted);
            }
            this.InvokeAsync("TeacherShowSubject", new object[] {
                        username}, this.TeacherShowSubjectOperationCompleted, userState);
        }
        
        private void OnTeacherShowSubjectOperationCompleted(object arg) {
            if ((this.TeacherShowSubjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TeacherShowSubjectCompleted(this, new TeacherShowSubjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/isValidTeacher", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void isValidTeacher([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string username, out bool isValidTeacherResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool isValidTeacherResultSpecified) {
            object[] results = this.Invoke("isValidTeacher", new object[] {
                        username});
            isValidTeacherResult = ((bool)(results[0]));
            isValidTeacherResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void isValidTeacherAsync(string username) {
            this.isValidTeacherAsync(username, null);
        }
        
        /// <remarks/>
        public void isValidTeacherAsync(string username, object userState) {
            if ((this.isValidTeacherOperationCompleted == null)) {
                this.isValidTeacherOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisValidTeacherOperationCompleted);
            }
            this.InvokeAsync("isValidTeacher", new object[] {
                        username}, this.isValidTeacherOperationCompleted, userState);
        }
        
        private void OnisValidTeacherOperationCompleted(object arg) {
            if ((this.isValidTeacherCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isValidTeacherCompleted(this, new isValidTeacherCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/Grade_Uploading_and_viewing_Criteria")]
    public partial class CompositeType {
        
        private bool boolValueField;
        
        private bool boolValueFieldSpecified;
        
        private string stringValueField;
        
        /// <remarks/>
        public bool BoolValue {
            get {
                return this.boolValueField;
            }
            set {
                this.boolValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BoolValueSpecified {
            get {
                return this.boolValueFieldSpecified;
            }
            set {
                this.boolValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string StringValue {
            get {
                return this.stringValueField;
            }
            set {
                this.stringValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/Grade_Uploading_and_viewing_Criteria")]
    public partial class SUBJECT {
        
        private string creditHours1Field;
        
        private string subjectCode1Field;
        
        private string subjectName1Field;
        
        private string usernameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CreditHours1 {
            get {
                return this.creditHours1Field;
            }
            set {
                this.creditHours1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SubjectCode1 {
            get {
                return this.subjectCode1Field;
            }
            set {
                this.subjectCode1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SubjectName1 {
            get {
                return this.subjectName1Field;
            }
            set {
                this.subjectName1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void IsAlreadyExistCompletedEventHandler(object sender, IsAlreadyExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAlreadyExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAlreadyExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool IsAlreadyExistResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool IsAlreadyExistResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetDataCompletedEventHandler(object sender, GetDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void RegisterStdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void RegisterTeacherCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void IsLoginTeacherCompletedEventHandler(object sender, IsLoginTeacherCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsLoginTeacherCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsLoginTeacherCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool IsLoginTeacherResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool IsLoginTeacherResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void TeacherLogoutCompletedEventHandler(object sender, TeacherLogoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TeacherLogoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TeacherLogoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool TeacherLogoutResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool TeacherLogoutResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool LoginResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool LoginResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void isValidUserCompletedEventHandler(object sender, isValidUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isValidUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isValidUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool isValidUserResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool isValidUserResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetDataUsingDataContractCompletedEventHandler(object sender, GetDataUsingDataContractCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataUsingDataContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataUsingDataContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CompositeType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CompositeType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void IsTeacherAlreadyExistsCompletedEventHandler(object sender, IsTeacherAlreadyExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsTeacherAlreadyExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsTeacherAlreadyExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool IsTeacherAlreadyExistsResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool IsTeacherAlreadyExistsResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ValidResetCompletedEventHandler(object sender, ValidResetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidResetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidResetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool ValidResetResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool ValidResetResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetPasswordCompletedEventHandler(object sender, SetPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool SetPasswordResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SetPasswordResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void DeleteRecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void resetPassCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetPasswordTeacherCompletedEventHandler(object sender, SetPasswordTeacherCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetPasswordTeacherCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetPasswordTeacherCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool SetPasswordTeacherResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool SetPasswordTeacherResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void resetPassTeacherCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void isValidSubjectCompletedEventHandler(object sender, isValidSubjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isValidSubjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isValidSubjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool isValidSubjectResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool isValidSubjectResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AddSubjectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void IsSubjectAlreadyExistCompletedEventHandler(object sender, IsSubjectAlreadyExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsSubjectAlreadyExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsSubjectAlreadyExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool IsSubjectAlreadyExistResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool IsSubjectAlreadyExistResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void isTeacherSubAlreadyExistCompletedEventHandler(object sender, isTeacherSubAlreadyExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isTeacherSubAlreadyExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isTeacherSubAlreadyExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool isTeacherSubAlreadyExistResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool isTeacherSubAlreadyExistResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AddTeacherRegisteredSubjectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void showSubjectsCompletedEventHandler(object sender, showSubjectsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class showSubjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal showSubjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SUBJECT[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SUBJECT[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void TeacherShowSubjectCompletedEventHandler(object sender, TeacherShowSubjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TeacherShowSubjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TeacherShowSubjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SUBJECT[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SUBJECT[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void isValidTeacherCompletedEventHandler(object sender, isValidTeacherCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isValidTeacherCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isValidTeacherCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool isValidTeacherResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool isValidTeacherResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591